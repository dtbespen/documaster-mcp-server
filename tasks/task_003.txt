# Task ID: 3
# Title: Integrate OAuth2 Authentication
# Status: in-progress
# Dependencies: 2
# Priority: high
# Description: Implement OAuth2-based authentication for secure access to the Documaster API.
# Details:
Implement OAuth2 Client Credentials Flow for server-to-server authentication with Documaster API. Ensure the server can acquire, cache, and auto-renew access tokens. Handle token expiration (based on expires_in value or HTTP 401 responses). Store client credentials securely using environment variables.

# Test Strategy:
Test authentication flow using integration tests. Simulate token expiration and renewal scenarios to ensure robustness.

# Subtasks:
## 1. Oppsett av OAuth2 konfigurasjon [done]
### Dependencies: None
### Description: Opprett konfigurasjonsfil for OAuth2 Client Credentials med nødvendige parametre fra PRD.
### Details:
Lag en konfigurasjonsfil som inneholder nødvendige parametre for OAuth2 autentisering med Documaster API. Inkluder client_id, client_secret, token URL, scope og andre relevante parametre. Sett opp miljøvariabler for sikker lagring av hemmeligheter.
<info added on 2025-05-12T18:54:16.702Z>
Etter første runde med undersøkelser i kodebasen:

1) Vi kan bruke den eksisterende 'config.util.ts' for konfigurasjonsadministrering. Den støtter allerede:
   - Miljøvariabler (process.env)
   - .env filer i prosjektets rot
   - Globale konfigurasjonsfiler (~/.mcp/configs.json)

2) Vi vil følge boilerplate-strukturen ved å:
   - Opprette en dokumentspesifikk konfigurasjonsfil i src/types/ for OAuth2-konfigurasjon
   - Definere typene for OAuth2-konfigurasjonen
   - Sette opp nødvendige miljøvariabler i .env-eksempelfil
   
3) Vi trenger følgende konfigurasjonsparametere:
   - DOCUMASTER_CLIENT_ID
   - DOCUMASTER_CLIENT_SECRET
   - DOCUMASTER_TOKEN_URL
   - DOCUMASTER_API_BASE_URL
   - DOCUMASTER_SCOPE (standard vil være 'openid')

Implementasjonsplan:
1. Opprette src/types/oauth2.types.ts med konfigurasjonsdefinisjon
2. Opprette src/utils/documaster-config.util.ts som vil hente verdiene fra eksisterende config
3. Legge til eksempler i .env.example for hvordan man setter opp disse parametrene
</info added on 2025-05-12T18:54:16.702Z>
<info added on 2025-05-12T18:58:14.691Z>
Implementasjonen av OAuth2-konfigurasjon er nå fullført. Her er en oppsummering av det som er gjort:

1. Opprettet `src/types/oauth2.types.ts` med følgende typer:
   - `OAuth2Config`: Konfigurasjon for OAuth2 Client Credentials Flow
   - `OAuth2TokenResponse`: Struktur for token-respons fra Documaster API
   - `CachedToken`: Utvidet token-respons med ekstra metadata for caching

2. Opprettet `src/utils/documaster-config.util.ts` som:
   - Bruker den eksisterende `config.util.ts` for å hente miljøvariabler
   - Validerer at alle nødvendige konfigurasjonsparametere er tilgjengelige
   - Returnerer et typet konfigurasjonsobjekt for bruk i OAuth2-servicen

3. Opprettet `scripts/env.example` med eksempler på miljøvariabler:
   - DOCUMASTER_CLIENT_ID
   - DOCUMASTER_CLIENT_SECRET
   - DOCUMASTER_TOKEN_URL
   - DOCUMASTER_API_BASE_URL
   - DOCUMASTER_SCOPE

Denne implementasjonen følger boilerplate-mønsteret med:
- Klare typedefinisjon i egne filer
- Singleton-instanser for konfigurasjonsklasser
- Robust feilhåndtering med spesifikke feilmeldinger
- Logger-integrasjon for debugging og feilsøking

Konfigurasjonen er nå klar til å bli brukt i OAuth2-autentiseringsservicen som vil bli implementert i neste deloppgave.
</info added on 2025-05-12T18:58:14.691Z>

## 2. Implementer OAuth2 autentiseringsservice [done]
### Dependencies: None
### Description: Implementer autentiseringsservice med token-håndtering.
### Details:
Opprett en OAuth2Service som håndterer autentisering mot Documaster API. Implementer metoder for å hente access token, validere token, og håndtere token-utløp. Følg Client Credentials-flyten som beskrevet i PRD med riktig HTTP-forespørsel med parametrene grant_type=client_credentials, client_id, client_secret og scope=openid.
<info added on 2025-05-12T19:02:46.281Z>
Implementasjonen av OAuth2-autentiseringsservicen er nå fullført. Her er en oppsummering av det som er gjort:

1. Installert `axios` for HTTP-forespørsler:
   ```bash
   npm install axios --save
   ```

2. Opprettet `src/services/documaster.oauth2.service.ts` som:
   - Implementerer OAuth2 Client Credentials-flyten som beskrevet i PRD
   - Håndterer token-caching og automatisk fornyelse
   - Fornyer token når det er 5 minutter til utløp
   - Håndterer feil på en robust måte med detaljerte feilmeldinger
   - Eksponerer metoder for å hente token og Authorization-header
   - Tilbyr en metode for å invalidere token ved behov (f.eks. ved HTTP 401)

3. Opprettet `src/services/documaster.oauth2.service.test.ts` med:
   - Enhetstester for alle hovedfunksjonene
   - Mocking av avhengigheter (axios, config)
   - Test av token-caching og fornyelse
   - Test av feilhåndtering

Servicen følger boilerplate-mønsteret med:
- Singleton-instans for global tilgang
- Robust feilhåndtering
- Logger-integrasjon for debugging og feilsøking
- Klar separasjon av ansvar

OAuth2-servicen er nå klar til å bli brukt i Documaster API-forespørsler, og vil automatisk håndtere autentisering, token-caching og fornyelse.
</info added on 2025-05-12T19:02:46.281Z>

## 3. Token-caching og automatisk fornyelse [pending]
### Dependencies: None
### Description: Implementer token-caching og automatisk fornyelse.
### Details:
Implementer en mekanisme for å cache access tokens og automatisk fornye dem før de utløper, basert på expires_in-verdien fra token-responsen. Forny tokenet når det er 5 minutter til utløp eller når en forespørsel returnerer HTTP 401, som beskrevet i PRD.

## 4. Integrasjon med MCP-verktøy [pending]
### Dependencies: None
### Description: Integrer OAuth2-servicen med MCP-verktøyene.
### Details:
Gjør OAuth2-servicen tilgjengelig for MCP-verktøyene, slik at de kan bruke den til å autentisere forespørsler til Documaster API. Implementer en clean architecture der controllers kan hente tokens fra autentiserings-servicen.

