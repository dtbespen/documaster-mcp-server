/**
 * Integration test for Documaster MCP Tool
 * 
 * Tests the Documaster tool handlers directly with mocked controller responses.
 */

import { jest, describe, beforeEach, it, expect } from '@jest/globals';

// Import the tools we want to test (need to use require since the file uses .js extension)
// @ts-ignore
const documasterTools = require('../../src/tools/documaster.tool.js');
// @ts-ignore
const { handleTestAuth } = documasterTools;

// Mock the documaster controller
jest.mock('../../src/controllers/documaster.controller.js', () => {
  // Mock data for tests
  const mockSearchResults = [
    {
      id: 'doc-123',
      title: 'Test Dokument 1',
      documentType: 'Rapport',
      createdDate: '2023-05-15',
      summary: 'Dette er et testdokument for søk',
      url: 'https://documaster.com/documents/doc-123'
    },
    {
      id: 'doc-456',
      title: 'Test Dokument 2',
      documentType: 'Notat',
      createdDate: '2023-06-20',
      summary: 'Dette er et annet testdokument for søk',
      url: 'https://documaster.com/documents/doc-456'
    }
  ];
  
  const mockQueryResult = {
    documentId: 'doc-123',
    documentTitle: 'Test Dokument 1',
    answer: 'Dette er et testsvar på spørringen.',
    confidence: 0.85
  };
  
  return {
    default: {
      testAuth: jest.fn().mockResolvedValue({
        success: true,
        message: 'Autentisering vellykket. Token-lengde: 1234 tegn. Token: mocked...token',
      }),
      searchDocuments: jest.fn().mockResolvedValue(mockSearchResults),
      queryDocument: jest.fn().mockResolvedValue(mockQueryResult)
    }
  };
});

describe('Documaster Tool Integration Test', () => {
  // Test the internal test tool
  describe('handleTestAuth (internal tool)', () => {
    it('should return a successful authentication message', async () => {
      const response = await handleTestAuth();
      
      expect(response.content).toBeDefined();
      expect(response.content).toHaveLength(1);
      expect(response.content[0].type).toBe('text');
      expect(response.content[0].text).toContain('Autentisering vellykket');
    });
  });
  
  // Test the search tool
  describe('searchDocumentsHandler', () => {
    it('should return formatted search results', async () => {
      // Create a test MCP server object with a tools property
      const mockServer = {
        tools: {},
        tool(name: string, _description: string, _schema: any, handler: any) {
          this.tools[name] = { handler };
        }
      };
      
      // Register the tools to the mock server
      documasterTools.default.registerTools(mockServer);
      
      // Get the search tool handler
      const searchHandler = mockServer.tools['search-documaster'].handler;
      expect(searchHandler).toBeDefined();
      
      // Call the handler directly
      const searchArgs = {
        query: 'test',
        limit: 10
      };
      
      const response = await searchHandler(searchArgs);
      
      // Verify response
      expect(response.content).toBeDefined();
      expect(response.content).toHaveLength(1);
      expect(response.content[0].type).toBe('text');
      expect(response.content[0].text).toContain('Søkeresultater for "test"');
      expect(response.content[0].text).toContain('Test Dokument 1');
      expect(response.content[0].text).toContain('Test Dokument 2');
    });
  });
  
  // Test the query tool
  describe('queryDocumentHandler', () => {
    it('should return formatted query results', async () => {
      // Create a test MCP server object with a tools property
      const mockServer = {
        tools: {},
        tool(name: string, _description: string, _schema: any, handler: any) {
          this.tools[name] = { handler };
        }
      };
      
      // Register the tools to the mock server
      documasterTools.default.registerTools(mockServer);
      
      // Get the query tool handler
      const queryHandler = mockServer.tools['query-documaster'].handler;
      expect(queryHandler).toBeDefined();
      
      // Call the handler directly
      const queryArgs = {
        documentId: 'doc-123',
        query: 'Hva handler dette dokumentet om?'
      };
      
      const response = await queryHandler(queryArgs);
      
      // Verify response
      expect(response.content).toBeDefined();
      expect(response.content).toHaveLength(1);
      expect(response.content[0].type).toBe('text');
      expect(response.content[0].text).toContain('Svar på spørsmål om dokument');
      expect(response.content[0].text).toContain('doc-123');
      expect(response.content[0].text).toContain('Test Dokument 1');
      expect(response.content[0].text).toContain('Hva handler dette dokumentet om?');
      expect(response.content[0].text).toContain('Dette er et testsvar på spørringen.');
      expect(response.content[0].text).toContain('85%');
    });
  });
}); 